endlessCanvas = true
document.getElementById("canvas-id").style.backgroundColor = "#FED2E2"

let colorPallete = ["#C68EFD", "#E9A5F1", "#8F87F1"]
let width = window.innerWidth, height = window.innerHeight

class Box{
    constructor(x1, y1, x2, y2){
        this.x1 = x1
        this.x2 = x2
        this.y1 = y1
        this.y2 = y2
        this.color = colorPallete[Math.floor(Math.random()*colorPallete.length)]
        
    }

    draw(){
        context.strokeStyle = "black"
        context.fillStyle = this.color
        context.beginPath()
        context.moveTo(this.x1, this.y1)
        context.lineTo(this.x1, this.y2)
        context.lineTo(this.x2, this.y2)
        context.lineTo(this.x2, this.y1)
        //context.stroke()
        context.fill()
    }

    getEdges() {
        return [
            { x1: this.x1, y1: this.y1, x2: this.x2, y2: this.y1 }, // Top
            { x1: this.x2, y1: this.y1, x2: this.x2, y2: this.y2 }, // Right
            { x1: this.x2, y1: this.y2, x2: this.x1, y2: this.y2 }, // Bottom
            { x1: this.x1, y1: this.y2, x2: this.x1, y2: this.y1 }  // Left
        ];
    }

}

let box = new Box(width/2 - 100, height/2 - 100, width/2 + 100, height/2 + 100)

let light = {
    x: 0,
    y: 0,
    rad: 3,
    updateLight(){
        this.x = mouseX
        this.y = mouseY
    },
    drawLight(){  
        context.fillStyle = "orange"
        context.beginPath();
        context.arc(this.x, this.y, this.rad, 0, 2 * Math.PI);
        context.fill();
    }
}

let angles = [], rays = 360, rayDistance = 500

for(let i = 0; i < rays; i ++){
    let alpha = (i * 2 * Math.PI) / rays; // Get radians from degrees
    angles.push(alpha) 
    //console.log(i, angles[i])
}

function intersect(x1, y1, x2, y2, x3, y3, x4, y4){
    let check = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4) //Denominator check if it is equal to 0 the lines are parallel

    if (check === 0) {
        return null
    }

    //t determines where the intersection happens on the wall    
    //u determines how far along the ray the intersection is

    let t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / check;
    let u = ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) / check;
    
    if(t >= 0 && t <= 1 && u >= 0){
        let intersectX = x1 + t * (x2 - x1)
        let intersectY = y1 + t * (y2 - y1)
        return { x: intersectX, y: intersectY, u: u} // Get the intersected point
    }

    return null
}

function update() {
    light.updateLight()


}

function draw() {
    box.draw()

    light.drawLight()

    for(let i = 0; i < rays; i ++){
        let rayDirectionX = Math.cos(angles[i])
        let rayDirectionY = Math.sin(angles[i])

        let rayEndX = light.x + rayDirectionX * rayDistance
        let rayEndY = light.y + rayDirectionY * rayDistance


        
        let closestIntersection = null;
        let minU = Infinity;

        let edges = box.getEdges();
        for (let edge of edges) {
            let intersection = intersect(light.x, light.y, rayEndX, rayEndY, edge.x1, edge.y1, edge.x2, edge.y2);
            if (intersection && intersection.u < minU) {
                minU = intersection.u;
                closestIntersection = intersection;
            }
        }

        if (closestIntersection) {
            rayEndX = closestIntersection.x;
            rayEndY = closestIntersection.y;
        }

        context.strokeStyle = "yellow"
        context.beginPath()
        context.moveTo(light.x, light.y)
        context.lineTo(rayEndX, rayEndY)
        context.stroke()
    }
}

function keyup(key) {
    //console.log("Pressed", key);

}

function mouseup() {
    //console.log("Mouse clicked at", mouseX, mouseY);

}
